// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  externalId String? @unique // id that clerk gives us
  name       String
  email      String  @unique
  apiKey     String  @unique @default(cuid())

  groups      GroupMember[]
  ownedGroups Group[]

  questions      UserQuestion[]
  questionMethod QuestionMethod @default(RANDOM)

  // New fields for social features
  avatar      String?
  bio         String?
  preferences Json? // Store user preferences as JSON

  // New relations for wishlists and social features
  wishlists     Wishlist[]
  wishlistItems WishlistItem[]
  messages      Message[]
  reactions     Reaction[]
  thankYouNotes ThankYouNote[]
  giftPhotos    GiftPhoto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, apiKey])
}

model Group {
  id              String            @id @default(cuid())
  name            String
  groupInvitation GroupInvitation[]
  code            String            @unique
  budget          Float?
  hasDrawStarted  Boolean           @default(false)

  // New fields for social features
  description String?
  theme       String? // For custom themes
  isPrivate   Boolean   @default(false)
  revealDate  DateTime? // For gift reveal countdown

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members   GroupMember[]
  questions GroupQuestion[]

  // New relations for social features
  messages   Message[]
  giftPhotos GiftPhoto[]
}

model GroupInvitation {
  id        String   @id @default(cuid())
  token     String   @unique
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token, groupId])
}

model GroupMember {
  id          String  @id @default(cuid())
  userId      String
  groupId     String
  user        User    @relation(fields: [userId], references: [id])
  group       Group   @relation(fields: [groupId], references: [id])
  isAdmin     Boolean @default(false)
  hasAnswered Boolean @default(false)
  drawn       Draw[]  @relation("DrawnParticipant")
  drawing     Draw[]  @relation("DrawingParticipant")

  // New fields for social features
  nickname String? // Custom nickname for the group
  color    String? // Custom color for the member in the group

  @@unique([userId, groupId])
}

enum QuestionMethod {
  RANDOM
  CUSTOM
}

model Question {
  id       String  @id @default(cuid())
  text     String
  isCustom Boolean @default(false)

  groupQuestions GroupQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupQuestion {
  id            String         @id @default(cuid())
  groupId       String
  questionId    String
  group         Group          @relation(fields: [groupId], references: [id])
  question      Question       @relation(fields: [questionId], references: [id])
  userQuestions UserQuestion[]

  @@unique([groupId, questionId])
}

model UserQuestion {
  id              String        @id @default(cuid())
  userId          String
  groupQuestionId String
  user            User          @relation(fields: [userId], references: [id])
  groupQuestion   GroupQuestion @relation(fields: [groupQuestionId], references: [id])
  answer          String
}

model Draw {
  id      String @id @default(cuid())
  groupId String

  drawingParticipantId String
  drawnParticipantId   String
  drawingParticipant   GroupMember @relation("DrawingParticipant", fields: [drawingParticipantId], references: [id])
  drawnParticipant     GroupMember @relation("DrawnParticipant", fields: [drawnParticipantId], references: [id])

  // New fields for social features
  giftStatus   GiftStatus @default(NOT_STARTED)
  giftNotes    String?
  giftRevealed Boolean    @default(false)
  revealDate   DateTime?

  drawnAt      DateTime       @default(now())
  Reaction     Reaction[]
  ThankYouNote ThankYouNote[]
  GiftPhoto    GiftPhoto[]
}

// New enum for gift status
enum GiftStatus {
  NOT_STARTED
  IN_PROGRESS
  PURCHASED
  SHIPPED
  DELIVERED
  OPENED
}

// New models for wishlist integration
model Wishlist {
  id          String         @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean        @default(true)
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  items       WishlistItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model WishlistItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float?
  url         String?
  imageUrl    String?
  priority    Int      @default(0) // 1-5, with 5 being highest priority
  isPurchased Boolean  @default(false)
  wishlistId  String
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id])
  userId      String // For quick access to the owner
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New models for social features
model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String   @id @default(cuid())
  type      String // emoji or reaction type
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  drawId    String
  draw      Draw     @relation(fields: [drawId], references: [id])
  createdAt DateTime @default(now())
}

model ThankYouNote {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  drawId    String
  draw      Draw     @relation(fields: [drawId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftPhoto {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  drawId    String?
  draw      Draw?    @relation(fields: [drawId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
